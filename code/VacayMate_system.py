
from typing import Any, Dict
from pprint import pprint
import sys
import os
from datetime import datetime

# Add the parent directory to the path to allow imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Import statements that work both as module and when run directly
try:
    # Try relative imports first (when used as module)
    from .graphs.VacayMate_graph import build_vacation_graph
    from .states.VacayMate_state import initialize_vacation_state
    from .utils import load_config
    from .langgraph_utils import save_graph_visualization
    from .consts import (
        MANAGER,
        RESEARCHER,
        CALCULATOR,
        PLANNER,
        SUMMARIZER,
    )
except ImportError:
    # Fall back to absolute imports (when run directly)
    from graphs.VacayMate_graph import build_vacation_graph
    from states.VacayMate_state import initialize_vacation_state
    from utils import load_config
    from langgraph_utils import save_graph_visualization
    from consts import (
        MANAGER,
        RESEARCHER,
        CALCULATOR,
        PLANNER,
        SUMMARIZER,
    )

# Parallel execution is handled differently in current langgraph version


def save_vacation_plan(final_state: Dict[str, Any], user_input: Dict[str, Any], output_dir: str = "outputs") -> str:
    """
    Save the vacation plan to a markdown file with timestamp.
    
    Args:
        final_state: The final state from the vacation graph
        user_input: The original user input
        output_dir: Directory to save the file
        
    Returns:
        str: Path to the saved file
    """
    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)
    
    # Generate filename with timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    destination = user_input.get("destination", "Unknown").replace(" ", "_")
    filename = f"vacation_plan_{destination}_{timestamp}.md"
    filepath = os.path.join(output_dir, filename)
    
    # Extract data from final state
    quotation = final_state.get("quotation", {})
    itinerary_draft = final_state.get("itinerary_draft", "")
    final_plan = final_state.get("final_plan", "")
    
    # Create the markdown content
    content = f"""# üåç VacayMate Vacation Plan

**Generated on:** {datetime.now().strftime("%B %d, %Y at %I:%M %p")}

## üìã Trip Details
- **Destination:** {user_input.get('destination', 'N/A')}
- **Current Location:** {user_input.get('current_location', 'N/A')}
- **Travel Dates:** {user_input.get('travel_dates', 'N/A')}
- **User Request:** {user_input.get('user_request', 'N/A')}

---

## üí∞ Cost Breakdown
"""
    
    # Add quotation if available
    if quotation:
        if isinstance(quotation, dict):
            for key, value in quotation.items():
                content += f"- **{key.replace('_', ' ').title()}:** {value}\n"
        else:
            content += f"{quotation}\n"
    else:
        content += "*Cost information not available*\n"
    
    content += "\n---\n\n## üìÖ Detailed Itinerary\n\n"
    
    # Add itinerary draft
    if itinerary_draft:
        content += f"{itinerary_draft}\n"
    else:
        content += "*Itinerary details not available*\n"
    
    content += "\n---\n\n## üéØ Final Vacation Plan\n\n"
    
    # Add final plan
    if final_plan:
        content += f"{final_plan}\n"
    else:
        content += "*Final plan not available*\n"
    
    content += f"""
---

*This vacation plan was generated by VacayMate AI System*
*File saved: {filepath}*
"""
    
    # Write to file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(content)
    
    return filepath


def run_vacation_graph(user_input: Dict[str, Any]) -> Dict[str, Any]:
    """
    Runs the VacationPlanner agentic graph with the provided LLM and configurations.
    """

    # Load configurations
    vacation_config = load_config()["vacaymate_system"]

    # Initialize state
    initial_state = initialize_vacation_state(
        user_request=user_input.get("user_request", "Plan my vacation"),
        current_location=user_input["current_location"],
        destination=user_input["destination"],
        travel_dates=user_input["travel_dates"],
        manager_prompt_cfg=vacation_config["agents"][MANAGER]["prompt_config"],
        researcher_prompt_cfg=vacation_config["agents"][RESEARCHER]["prompt_config"],
        calculator_prompt_cfg=vacation_config["agents"][CALCULATOR]["prompt_config"],
        planner_prompt_cfg=vacation_config["agents"][PLANNER]["prompt_config"],
        summarizer_prompt_cfg=vacation_config["agents"][SUMMARIZER]["prompt_config"],
    )

    # Build the graph
    graph = build_vacation_graph(vacation_config)

    # Optional: Save a visualization of the graph for debugging
    save_graph_visualization(graph, graph_name="vacaymate_system")

    # Run the graph
    final_state = graph.invoke(initial_state)
    
    # Save the vacation plan to a file
    saved_file = save_vacation_plan(final_state, user_input)
    print(f"üìÑ Vacation plan saved to: {saved_file}")
    
    return final_state


if __name__ == "__main__":
    # Example input
    user_request = {
        "user_request": "I want to plan a vacation",
        "current_location": "New York",
        "destination": "Barcelona",
        "travel_dates": "2025-09-10 to 2025-09-20",
    }

    response = run_vacation_graph(user_request)

    print("=" * 80)
    print("üåç VACATION PLANNER DEMO")
    print("=" * 80)
    print("‚úÖ Vacation plan generated successfully!")
    print("üìÑ Plan saved to file (see message above for file path)")
    print("=" * 80)
    print("Quotation:")
    pprint(response.get("quotation", {}))
    print("=" * 80)
    print("Itinerary Draft:")
    pprint(response.get("itinerary_draft", "No itinerary generated"))
    print("=" * 80)
    print("Final Plan:")
    pprint(response.get("final_plan", "No final plan generated"))
    print("=" * 80)